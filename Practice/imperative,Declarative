 IaC

 Imperative
 1. Provision a VM by the name 'web-server'
 2. Install nginx S/W on Install
 3. Edit configuration file to use port '8080'
 4. Edit configuration file to web path '/var/www/nginx'
 5. Load web pages to '/var/www/nginx' from GIT Repo - X
 6. Start nginx server

 Declarative 
 VM Name: web-server
 Database: nginx
 Port: 8080
 Path: /var/www/nginx
 Code: GIT Repo - X

-----------------------------
Kubernetes

Imperative
- Create Objects
> kubectl run --image=nginx nginx
> kubectl create deployment --image=nginx nginx
> kubectl expose deployment nginx --port 80

- Updatae Objects
> kubcetl edit deployment nginx
> kubcetl scale deployment nginx --replicas=5
> kubcetl set image deployment nginx nginx=nginx:1.18

- Imperative Object Configuration Files
> kubcetl create -f nginx.yaml
> kubcetl replace -f nginx.yaml
> kubcetl delete -f ngingx.yaml


Declarative
> kubectl apply -f nginx.yaml
>

-----------------------------------------------
** POD
Create an NGINX Pod

> kubectl run nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

> kubectl run nginx --image=nginx  --dry-run=client -o yaml



** Deployment
Create a deployment

> kubectl create deployment --image=nginx nginx



Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

> kubectl create deployment --image=nginx nginx --dry-run -o yaml



Generate Deployment with 4 Replicas

> kubectl create deployment nginx --image=nginx --replicas=4



You can also scale a deployment using the kubectl scale command.

> kubectl scale deployment nginx --replicas=4



Another way to do this is to save the YAML definition to a file.

> kubectl create deployment nginx --image=nginx--dry-run=client -o yaml > nginx-deployment.yaml

You can then update the YAML file with the replicas or any other field before creating the deployment.

Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

> kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors)

Or

> kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml  
(This will not use the pods labels as selectors, instead it will assume selectors as app=redis. 
You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set.
 So generate the file and modify the selectors before creating the service)



Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:

> kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

> kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)