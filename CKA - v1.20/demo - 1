1. Deploy a pod named nginx-pod using the nginx:alpine image.
Name: nginx-pod
Image: nginx:alpine
--> kubectl run nginx-pod --image=nignx:alpine

2. Deploy a messaging pod using the redis:alpine image with the labels set to tier=msg.
Pod Name: messaging
Image: redis:alpine
Labels: tier=msg

--> kubectl run messaging --image=redis:alpine -l tier=msg
--> kubectl get pods --show-labels

3. Create a namespace named apx-x9984574

--> kubectl create namespace apx-x9984574

4. Get the list of nodes in JSON format and store it in a file at /opt/outputs/nodes-z3444kd9.json

--> kubectl get nodes -o json > /opt/outputs/nodes-z3444kd9.json

5. Create a service messaging-service to expose the messaging application within the cluster on port 6379.
Service: messaging-service
Port: 6379
Type: ClusterIp
Use the right labels
--> kubectl expose pod messaging --name messaging-service --port 6379 --taget-port 6379 

6. Create a deployment named hr-web-app using the image kodekloud/webapp-color with 2 replicas
Name: hr-web-app
Image: kodekloud/webapp-color
Replicas: 2

--> kubectl create deployment hr-web-app --image=kodekloud/webapp-color --replicas=2
or 
--> kubectl create deployment hr-web-app --image=kodekloud/webapp-color
    kubectl scale deployment hr-web-app --replicas=2

7. Create a static pod named static-busybox on the master node that uses the busybox image and the command sleep 1000
Name: static-busybox
Image: busybox

--> kubectl run static-busybox --image=busybox --command sleep 1000 --dry-run=client -o yaml > static.yaml

8. Create a POD in the finance namespace named temp-bus with the image redis:alpine.
Name: temp-bus
Image Name: redis:alpine

--> kubectl -n finance run temp-bus --image=redis:alpine

9. A new application orange is deployed. There is something wrong with it. Identify and fix the issue.

10. Expose the hr-web-app as service hr-web-app-service application on port 30082 on the nodes on the cluster
The web application listens on port 8080

--> kubectl expose deployment hr-web-app --name hr-web-app-service --type=NodePort --port 8080 --target-port 8080 \
--dry-run=client -o yaml > hrsvc.yaml

Name: hr-web-app-service
Type: NodePort
Endpoints: 2
Port: 8080
NodePort: 30082

apiVersion: v1
kind: Service
metadata:
  name: hr-web-app-service
spec:
  type: NodePort
  selector:
    app: hr-web-app
  ports:
      # 기본적으로 그리고 편의상 `targetPort` 는 `port` 필드와 동일한 값으로 설정된다.
    - port: 8080
      targetPort: 8080
      nodePort: 30082

11. Use JSON PATH query to retrieve the osImages of all the nodes and store it in a file /opt/outputs/nodes_os_x43kj56.txt
The osImages are under the nodeInfo section under status of each node. 

kubectl get nodes -o jsonpath='{.items[*].status.nodeInfo.osImage}' > /opt/outputs/nodes_os_x43kj56.txt

12. Create a Persistent Volume with the given specification.
Volume Name: pv-analytics
Storage: 100Mi
Access modes: ReadWriteMany
Host Path: /pv/data-analytics


apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-analytics
  labels:
    type: local
spec:
  storageClassName: manual
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/pv/data-analytics"
